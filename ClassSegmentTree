#define ll long long
class SegmentTree {
public:
    vector<ll> segTree;

    SegmentTree(ll n) {
        segTree.resize(4 * n, 0);
    }

    void build_tree(vector<int>& arr, int low, int high, int index) {
        if (low == high) {
            segTree[index] = arr[low];
            return;
        }
        int mid = (high + low) / 2;
        build_tree(arr, low, mid, 2 * index + 1);
        build_tree(arr, mid + 1, high, 2 * index + 2);
        segTree[index] = max(segTree[2 * index + 1], segTree[2 * index + 2]);
    }

    void updates(vector<int>& arr, int i, int new_val, int low, int high, int index) {
        if (low == high) {
            arr[i] = new_val;
            segTree[index] = new_val;
            return;
        }
        int mid = (high + low) / 2;
        if (i <= mid)
            updates(arr, i, new_val, low, mid, 2 * index + 1);
        else
            updates(arr, i, new_val, mid + 1, high, 2 * index + 2);
        segTree[index] = max(segTree[2 * index + 1], segTree[2 * index + 2]);
    }

    ll query(int x, int y, int low, int high, int index) {
        if (high < x || low > y)
            return LLONG_MIN;
        if (low >= x && high <= y)
            return segTree[index];
        int mid = (high + low) / 2;
        return max(query(x, y, low, mid, 2 * index + 1), query(x, y, mid + 1, high, 2 * index + 2));
    }
};


//Initialisation

SegmentTree obj = new SegmentTree(n);
obj->build_tree(arr, 0, n - 1, 0);
